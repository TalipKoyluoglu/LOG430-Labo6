# Fichier de configuration NGINX pour le Load Balancing

# Définition du groupe de serveurs "upstream" qui exécutent notre application Django.
# NGINX va répartir la charge entre ces serveurs.
upstream django_app {
    # Stratégie de load balancing : round-robin (par défaut)
    # Chaque nouvelle requête va au serveur suivant dans la liste.
    server app:8000;
    # Lorsque nous scalerons à plusieurs instances, nous les ajouterons ici.
    # Par exemple :
    # server app-1:8000;
    # server app-2:8000;
}

server {
    # NGINX écoute sur le port 80, le port standard pour le HTTP.
    listen 80;

    # Toutes les requêtes reçues, quel que soit leur chemin (location /),
    # seront transmises au groupe de serveurs "django_app".
    location / {
        # proxy_pass est la directive clé qui transfère la requête.
        proxy_pass http://django_app;

        # Paramètres recommandés pour un reverse proxy :
        # Ils assurent que l'application Django reçoit les bonnes informations
        # sur la requête originale (comme l'IP du client et le protocole).
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Location spécifique pour l'endpoint /metrics de Prometheus
    # Cela permet à Prometheus de scraper les métriques via NGINX.
    location /metrics {
        proxy_pass http://django_app;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
} 