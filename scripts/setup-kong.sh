#!/bin/bash

# Activer le mode debug pour voir toutes les commandes ex√©cut√©es
set -x

# Script de configuration automatique Kong
# V√©rifie si les services existent d√©j√† avant de les cr√©er
# Inclut la configuration du load balancing

echo "üöÄ Configuration Kong API Gateway avec Load Balancing..."

# Attendre que Kong soit pr√™t
echo "‚è≥ Attente de Kong..."
until curl -s http://kong:8001 > /dev/null 2>&1; do
    echo "   Kong pas encore pr√™t, attente 2s..."
    sleep 2
done
echo "‚úÖ Kong est pr√™t !"

# Fonction pour cr√©er un upstream s'il n'existe pas
create_upstream_if_not_exists() {
    local upstream_name=$1
    local algorithm=$2
    
    echo "üîç V√©rification de l'upstream '$upstream_name'..."
    
    # V√©rifier si l'upstream existe d√©j√† avec debug
    local check_response=$(curl -s -w "%{http_code}" "http://kong:8001/upstreams/$upstream_name")
    local http_code="${check_response: -3}"
    local response_body="${check_response%???}"
    
    echo "   Code HTTP: $http_code"
    echo "   R√©ponse: $response_body"
    
    if [ "$http_code" = "200" ]; then
        echo "   ‚ö†Ô∏è  Upstream '$upstream_name' existe d√©j√†, ignor√©"
    else
        echo "   ‚ûï Cr√©ation de l'upstream '$upstream_name' avec algorithme '$algorithm'"
        local create_response=$(curl -s -w "%{http_code}" -X POST http://kong:8001/upstreams/ \
            --data "name=$upstream_name" \
            --data "algorithm=$algorithm")
        local create_code="${create_response: -3}"
        local create_body="${create_response%???}"
        
        echo "   Code cr√©ation: $create_code"
        echo "   R√©ponse cr√©ation: $create_body"
        
        if [ "$create_code" = "201" ] || [ "$create_code" = "200" ]; then
            echo "   ‚úÖ Upstream '$upstream_name' cr√©√©"
        else
            echo "   ‚ùå Erreur cr√©ation upstream '$upstream_name' (code: $create_code)"
            echo "   R√©ponse: $create_body"
        fi
    fi
}

# Fonction pour ajouter un target √† un upstream s'il n'existe pas
create_target_if_not_exists() {
    local upstream_name=$1
    local target_url=$2
    local weight=$3
    
    echo "üîç V√©rification du target '$target_url' dans '$upstream_name'..."
    
    # V√©rifier si le target existe d√©j√†
    local targets_response=$(curl -s -w "%{http_code}" "http://kong:8001/upstreams/$upstream_name/targets")
    local targets_code="${targets_response: -3}"
    local targets_body="${targets_response%???}"
    
    echo "   Code v√©rification targets: $targets_code"
    echo "   R√©ponse targets: $targets_body"
    
    if [ "$targets_code" = "200" ] && echo "$targets_body" | grep -q "$target_url"; then
        echo "   ‚ö†Ô∏è  Target '$target_url' existe d√©j√† dans '$upstream_name', ignor√©"
    else
        echo "   ‚ûï Ajout du target '$target_url' √† l'upstream '$upstream_name'"
        local add_response=$(curl -s -w "%{http_code}" -X POST "http://kong:8001/upstreams/$upstream_name/targets" \
            --data "target=$target_url" \
            --data "weight=$weight")
        local add_code="${add_response: -3}"
        local add_body="${add_response%???}"
        
        echo "   Code ajout: $add_code"
        echo "   R√©ponse ajout: $add_body"
        
        if [ "$add_code" = "201" ] || [ "$add_code" = "200" ]; then
            echo "   ‚úÖ Target '$target_url' ajout√©"
        else
            echo "   ‚ùå Erreur ajout target '$target_url' (code: $add_code)"
            echo "   R√©ponse: $add_body"
        fi
    fi
}

# Fonction pour cr√©er un service s'il n'existe pas
create_service_if_not_exists() {
    local service_name=$1
    local service_url=$2
    
    echo "üîç V√©rification du service '$service_name'..."
    
    # V√©rifier si le service existe d√©j√† avec debug
    local check_response=$(curl -s -w "%{http_code}" "http://kong:8001/services/$service_name")
    local http_code="${check_response: -3}"
    local response_body="${check_response%???}"
    
    echo "   Code HTTP: $http_code"
    echo "   R√©ponse: $response_body"
    
    if [ "$http_code" = "200" ]; then
        echo "   ‚ö†Ô∏è  Service '$service_name' existe d√©j√†, ignor√©"
    else
        echo "   ‚ûï Cr√©ation du service '$service_name' avec URL '$service_url'"
        local create_response=$(curl -s -w "%{http_code}" -X POST http://kong:8001/services/ \
            --data "name=$service_name" \
            --data "url=$service_url")
        local create_code="${create_response: -3}"
        local create_body="${create_response%???}"
        
        echo "   Code cr√©ation: $create_code"
        echo "   R√©ponse cr√©ation: $create_body"
        
        if [ "$create_code" = "201" ] || [ "$create_code" = "200" ]; then
            echo "   ‚úÖ Service '$service_name' cr√©√©"
        else
            echo "   ‚ùå Erreur cr√©ation service '$service_name' (code: $create_code)"
            echo "   R√©ponse: $create_body"
        fi
    fi
}

# Fonction pour cr√©er une route si elle n'existe pas
create_route_if_not_exists() {
    local service_name=$1
    local route_name=$2
    local route_path=$3

    echo "üîç V√©rification de la route '$route_name'..."
    
    # V√©rifier si la route existe d√©j√†
    local check_response=$(curl -s -w "%{http_code}" "http://kong:8001/routes/$route_name")
    local http_code="${check_response: -3}"
    local response_body="${check_response%???}"
    
    echo "   Code HTTP: $http_code"
    echo "   R√©ponse: $response_body"
    
    if [ "$http_code" = "200" ]; then
        echo "   ‚ö†Ô∏è  Route '$route_name' existe d√©j√†, ignor√©e"
    else
        echo "   ‚ûï Cr√©ation de la route '$route_name' -> '$route_path' pour service '$service_name'"
        local create_response=$(curl -s -w "%{http_code}" -X POST "http://kong:8001/services/$service_name/routes" \
            --data "name=$route_name" \
            --data "paths[]=$route_path")
        local create_code="${create_response: -3}"
        local create_body="${create_response%???}"
        
        echo "   Code cr√©ation: $create_code"
        echo "   R√©ponse cr√©ation: $create_body"
        
        if [ "$create_code" = "201" ] || [ "$create_code" = "200" ]; then
            echo "   ‚úÖ Route '$route_name' cr√©√©e"
        else
            echo "   ‚ùå Erreur cr√©ation route '$route_name' (code: $create_code)"
            echo "   R√©ponse: $create_body"
        fi
    fi
}

# Fonction pour cr√©er un plugin s'il n'existe pas
create_plugin_if_not_exists() {
    local plugin_name=$1
    local plugin_config=$2
    
    echo "üîç V√©rification du plugin '$plugin_name'..."
    
    # V√©rifier si le plugin existe d√©j√† (recherche par nom)
    local plugins_response=$(curl -s -w "%{http_code}" "http://kong:8001/plugins/")
    local plugins_code="${plugins_response: -3}"
    local plugins_body="${plugins_response%???}"
    
    echo "   Code plugins: $plugins_code"
    echo "   R√©ponse plugins: $plugins_body"
    
    if [ "$plugins_code" = "200" ] && echo "$plugins_body" | grep -q "\"name\":\"$plugin_name\""; then
        echo "   ‚ö†Ô∏è  Plugin '$plugin_name' existe d√©j√†, ignor√©"
    else
        echo "   ‚ûï Activation du plugin '$plugin_name'"
        local create_response=$(curl -s -w "%{http_code}" -X POST http://kong:8001/plugins/ \
            --data "name=$plugin_name" \
            $plugin_config)
        local create_code="${create_response: -3}"
        local create_body="${create_response%???}"
        
        echo "   Code cr√©ation: $create_code"
        echo "   R√©ponse cr√©ation: $create_body"
        
        if [ "$create_code" = "201" ] || [ "$create_code" = "200" ]; then
            echo "   ‚úÖ Plugin '$plugin_name' activ√©"
        else
            echo "   ‚ùå Erreur activation plugin '$plugin_name' (code: $create_code)"
            echo "   R√©ponse: $create_body"
        fi
    fi
}

# Fonction pour cr√©er un consommateur s'il n'existe pas
create_consumer_if_not_exists() {
    local consumer_name=$1
    local custom_id=$2
    
    echo "üîç V√©rification du consommateur '$consumer_name'..."
    
    # V√©rifier si le consommateur existe d√©j√†
    local check_response=$(curl -s -w "%{http_code}" "http://kong:8001/consumers/$consumer_name")
    local http_code="${check_response: -3}"
    local response_body="${check_response%???}"
    
    echo "   Code HTTP: $http_code"
    echo "   R√©ponse: $response_body"
    
    if [ "$http_code" = "200" ]; then
        echo "   ‚ö†Ô∏è  Consommateur '$consumer_name' existe d√©j√†, ignor√©"
    else
        echo "   ‚ûï Cr√©ation du consommateur '$consumer_name'"
        local create_response=$(curl -s -w "%{http_code}" -X POST http://kong:8001/consumers/ \
            --data "username=$consumer_name" \
            --data "custom_id=$custom_id")
        local create_code="${create_response: -3}"
        local create_body="${create_response%???}"
        
        echo "   Code cr√©ation: $create_code"
        echo "   R√©ponse cr√©ation: $create_body"
        
        if [ "$create_code" = "201" ] || [ "$create_code" = "200" ]; then
            echo "   ‚úÖ Consommateur '$consumer_name' cr√©√©"
        else
            echo "   ‚ùå Erreur cr√©ation consommateur '$consumer_name' (code: $create_code)"
            echo "   R√©ponse: $create_body"
        fi
    fi
}

# Fonction pour cr√©er une cl√© API s'il n'existe pas
create_api_key_if_not_exists() {
    local consumer_name=$1
    local api_key=$2
    
    echo "üîç V√©rification de la cl√© API pour '$consumer_name'..."
    
    # V√©rifier si la cl√© existe d√©j√† pour ce consommateur
    local keys_response=$(curl -s -w "%{http_code}" "http://kong:8001/consumers/$consumer_name/key-auth")
    local keys_code="${keys_response: -3}"
    local keys_body="${keys_response%???}"
    
    echo "   Code cl√©s: $keys_code"
    echo "   R√©ponse cl√©s: $keys_body"
    
    if [ "$keys_code" = "200" ] && echo "$keys_body" | grep -q "$api_key"; then
        echo "   ‚ö†Ô∏è  Cl√© API '$api_key' existe d√©j√† pour '$consumer_name', ignor√©e"
    else
        echo "   ‚ûï Cr√©ation de la cl√© API pour '$consumer_name'"
        local create_response=$(curl -s -w "%{http_code}" -X POST "http://kong:8001/consumers/$consumer_name/key-auth" \
            --data "key=$api_key")
        local create_code="${create_response: -3}"
        local create_body="${create_response%???}"
        
        echo "   Code cr√©ation: $create_code"
        echo "   R√©ponse cr√©ation: $create_body"
        
        if [ "$create_code" = "201" ] || [ "$create_code" = "200" ]; then
            echo "   ‚úÖ Cl√© API cr√©√©e pour '$consumer_name'"
        else
            echo "   ‚ùå Erreur cr√©ation cl√© API pour '$consumer_name' (code: $create_code)"
            echo "   R√©ponse: $create_body"
        fi
    fi
}

echo "‚öñÔ∏è  Configuration du Load Balancing..."

# Cr√©er l'upstream pour le service catalogue avec round-robin
create_upstream_if_not_exists "catalogue-upstream" "round-robin"

# Ajouter les targets (instances) √† l'upstream
create_target_if_not_exists "catalogue-upstream" "catalogue-service-1:8000" "100"
create_target_if_not_exists "catalogue-upstream" "catalogue-service-2:8000" "100"
create_target_if_not_exists "catalogue-upstream" "catalogue-service-3:8000" "100"

echo "üì¶ Configuration des services..."

# Cr√©er les services (catalogue utilise l'upstream)
create_service_if_not_exists "catalogue-service" "http://catalogue-upstream"
create_service_if_not_exists "inventaire-service" "http://inventaire-service:8000"
create_service_if_not_exists "commandes-service" "http://commandes-service:8000"
create_service_if_not_exists "supply-chain-service" "http://supply-chain-service:8000"
create_service_if_not_exists "ecommerce-service" "http://ecommerce-service:8005"

# === Configuration CORS sur chaque service ===
echo "üîí Configuration CORS sur les services..."
for service in catalogue-service inventaire-service commandes-service supply-chain-service ecommerce-service; do
  echo "   ‚ûï Ajout du plugin CORS sur $service"
  curl -s -X POST http://localhost:8081/services/$service/plugins \
    --data "name=cors" \
    --data "config.origins=*" \
    --data "config.methods=GET,POST,PUT,DELETE,OPTIONS" \
    --data "config.headers=Accept,Authorization,Content-Type,X-API-Key" \
    --data "config.credentials=true" > /dev/null

done

echo "üõ§Ô∏è  Configuration des routes..."

# Cr√©er les routes
create_route_if_not_exists "catalogue-service" "catalogue-route" "/api/catalogue"
create_route_if_not_exists "inventaire-service" "inventaire-route" "/api/inventaire"
create_route_if_not_exists "commandes-service" "commandes-route" "/api/commandes"
create_route_if_not_exists "supply-chain-service" "supply-chain-route" "/api/supply-chain"
create_route_if_not_exists "ecommerce-service" "ecommerce-route" "/api/ecommerce"

echo "üîå Configuration des plugins..."

# Cr√©er les plugins (fonctionnalit√©s avanc√©es)
create_plugin_if_not_exists "key-auth" '--data "config.key_names=X-API-Key"'
create_plugin_if_not_exists "file-log" '--data "config.path=/tmp/kong-access.log"'
create_plugin_if_not_exists "prometheus" ''

echo "üë§ Configuration des consommateurs et cl√©s API..."

# Cr√©er le consommateur et sa cl√© API
create_consumer_if_not_exists "magasin-app" "magasin-frontend"
create_api_key_if_not_exists "magasin-app" "magasin-secret-key-2025"

echo "üìä R√©sum√© de la configuration Kong:"
echo "   Upstreams: $(curl -s http://kong:8001/upstreams/ | jq '.data | length') configur√©s"
echo "   Services: $(curl -s http://kong:8001/services/ | jq '.data | length') configur√©s"
echo "   Routes: $(curl -s http://kong:8001/routes/ | jq '.data | length') configur√©es"
echo "   Plugins: $(curl -s http://kong:8001/plugins/ | jq '.data | length') activ√©s"
echo "   Consommateurs: $(curl -s http://kong:8001/consumers/ | jq '.data | length') cr√©√©s"

echo ""
echo "‚öñÔ∏è  Configuration Load Balancing:"
echo "   Upstream: catalogue-upstream (round-robin)"
echo "   Targets: $(curl -s http://kong:8001/upstreams/catalogue-upstream/targets | jq '.data | length') instances"

echo ""
echo "üîë Cl√© API pour ton application:"
echo "   Header: X-API-Key: magasin-secret-key-2025"
echo ""
echo "üìù Test de l'API Gateway:"
echo "   Sans cl√©: curl http://localhost:8080/api/catalogue/"
echo "   Avec cl√©: curl -H 'X-API-Key: magasin-secret-key-2025' http://localhost:8080/api/catalogue/"
echo ""
echo "üß™ Test Load Balancing:"
echo "   for i in {1..6}; do curl -H 'X-API-Key: magasin-secret-key-2025' http://localhost:8080/api/catalogue/; echo; done"

echo "üéâ Configuration Kong avec Load Balancing termin√©e !" 